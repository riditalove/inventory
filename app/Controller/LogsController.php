<?php
App::uses('AppController', 'Controller');

/**
* Logs Controller
* Owner: Abdul Jalil
* http://www.softwareend.com
 * @property Log $Log
 * @property PaginatorComponent $Paginator
*/

class LogsController extends AppController {

/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator');

/**
 * index method
 * Generated by Abdul Jalil
 * @return void
 */
public function index() {
        $this->Log->recursive = 0;
        $this->set('logs', $this->Paginator->paginate());
}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
public function view($id = null) {
    if (!$this->Log->exists($id)) {
        throw new NotFoundException(__('Invalid log'));
    }
    $options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));
    $this->set('log', $this->Log->find('first', $options));
}

/**
 * add method
 *
 * @return void
 */
public function add() {
    if ($this->request->is('post')) {
        $this->Log->create();
        if ($this->Log->save($this->request->data)) {
            $this->Flash->success(__('The log has been saved.'));
            return $this->redirect(array('action' => 'index'));
        } else {
            $this->Flash->error(__('The log could not be saved. Please, try again.'));
        }
    }
		$users = $this->Log->User->find('list', array('conditions' => array('status' => E_ERROR)));
		$this->set(compact('users'));
}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
public function edit($id = null) {
    if (!$this->Log->exists($id)) {
        throw new NotFoundException(__('Invalid log'));
    }
    if ($this->request->is(array('post', 'put'))) {
        if ($this->Log->save($this->request->data)) {
            $this->Flash->success(__('The log has been updated.'));
            return $this->redirect(array('action' => 'index'));
        } else {
            $this->Flash->error(__('The log could not be updated. Please, try again.'));
        }
    } else {
        $options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));
        $this->request->data = $this->Log->find('first', $options);
    }
		$users = $this->Log->User->find('list', array('conditions' => array('status' => E_ERROR)));
		$this->set(compact('users'));
}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
public function delete($id = null) {
    $this->Log->id = $id;
    if (!$this->Log->exists()) {
        throw new NotFoundException(__('Invalid log'));
    }
    $this->request->allowMethod('post', 'delete');
    if ($this->Log->delete()) {
        $this->Flash->success(__('The log has been deleted.'));
    } else {
        $this->Flash->error(__('The log could not be deleted. Please, try again.'));
    }
    return $this->redirect(array('action' => 'index'));
}
}
