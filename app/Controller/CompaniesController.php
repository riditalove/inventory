<?php

App::uses('AppController', 'Controller');

/**
 * Companies Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Company $Company
 * @property PaginatorComponent $Paginator
 */
class CompaniesController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    public function beforeFilter() {
        parent::beforeFilter();

        $this->set('weekdays', array('0' => 'Sunday', '1' => 'Monday', '2' => 'Tuesday', '3' => 'Wednesday', '4' => 'Thursday', '5' => 'Friday', '6' => 'Saturday'));
    }

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Company->recursive = 0;
        $this->set('companies', $this->Paginator->paginate());

        $this->loadModel('User');
        $users = $this->User->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set('users', $users);
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Company->exists($id)) {
            throw new NotFoundException(__('Invalid company'));
        }
        $options = array('conditions' => array('Company.' . $this->Company->primaryKey => $id));
        $this->set('company', $this->Company->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Company->create();
            $this->request->data['Company']['weekend'] = implode(',', $this->request->data['Company']['weekend']);
            $this->request->data['Company']['entry_by'] = $this->Auth->user('id');
            if ($this->Company->save($this->request->data)) {
                $this->Flash->success(__('The company has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The company could not be saved. Please, try again.'));
            }
        }
        $companytypes = $this->Company->Companytype->find('list', array('conditions' => array('status' => E_ERROR)));
        $companynatures = $this->Company->Companynature->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companytypes', 'companynatures'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Company->exists($id)) {
            throw new NotFoundException(__('Invalid company'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['Company']['weekend'] = implode(',', $this->request->data['Company']['weekend']);
            $this->request->data['Company']['edit_by'] = $this->Auth->user('id');
            if ($this->Company->save($this->request->data)) {
                $this->Flash->success(__('The company has been updated.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The company could not be updated. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Company.' . $this->Company->primaryKey => $id));
            $this->request->data = $this->Company->find('first', $options);
        }
        $companytypes = $this->Company->Companytype->find('list', array('conditions' => array('status' => E_ERROR)));
        $companynatures = $this->Company->Companynature->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companytypes', 'companynatures'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Company->id = $id;
        if (!$this->Company->exists()) {
            throw new NotFoundException(__('Invalid company'));
        }
        $this->request->allowMethod('post', 'delete');
        if ($this->Company->delete()) {
            $this->Flash->success(__('The company has been deleted.'));
        } else {
            $this->Flash->error(__('The company could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

}
