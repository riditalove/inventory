<?php

App::uses('AppController', 'Controller');

/**
 * Users Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 *
 * @property User $User
 * @property PaginatorComponent $Paginator
 */
class UsersController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');
    public function beforeFilter() {
        parent::beforeFilter();
        $this->set('status', array( '0' => 'Pending', '1' => 'Deployed', '2' => 'Ready to Deploy', '3' => 'Archived','4' => 'Broken - Not Fixable', '5' => 'Lost/Stolen','6' => 'Out for Diagnostics','7' => 'Out for Repair'));
    }

    /**
     * index method
     * Generated by Abdul Jalil
     * http://www.softwareend.com
     * @return void
     */
    public function index() {
        $this->User->recursive = 0;

        $conditions = array();
        if (!empty($this->request->data['Src']['id'])) {
            $conditions[] = array("User.id" => $this->request->data['Src']['id']);
        }
        if (!empty($this->request->data['Src']['name'])) {
            $conditions[] = array("User.name" => $this->request->data['Src']['name']);
        }
        if (!empty($this->request->data['Src']['created'])) {
            $conditions[] = array("User.created" => "'" . $this->request->data['Src']['created'] . "'");
        }

        $this->Paginator->settings = array('conditions' => $conditions, 'order' => array('User.id' => 'ASC'));
        $this->set('users', $this->Paginator->paginate());

        $companies = $this->User->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $departments = $this->User->Department->find('list', array('conditions' => array('status' => E_ERROR)));
        $sections = $this->User->Section->find('list', array('conditions' => array('status' => E_ERROR)));
        $designations = $this->User->Designation->find('list', array('conditions' => array('status' => E_ERROR)));
        $roles = $this->User->Role->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies', 'departments', 'sections', 'designations', 'roles'));
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
        $this->set('user', $this->User->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->User->create();
            if ($this->User->save($this->request->data)) {
                $this->Flash->success(__('The user has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The user could not be saved. Please, try again.'));
            }
        }
        $companies = $this->User->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $departments = $this->User->Department->find('list', array('conditions' => array('status' => E_ERROR)));
        $sections = $this->User->Section->find('list', array('conditions' => array('status' => E_ERROR)));
        $designations = $this->User->Designation->find('list', array('conditions' => array('status' => E_ERROR)));
        $roles = $this->User->Role->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies', 'departments', 'sections', 'designations', 'roles'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        if ($this->request->is(array('post', 'put'))) {
            if ($this->User->save($this->request->data)) {
                $this->Flash->success(__('The user has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The user could not be saved. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
            $this->request->data = $this->User->find('first', $options);
        }
        $companies = $this->User->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $departments = $this->User->Department->find('list', array('conditions' => array('status' => E_ERROR)));
        $sections = $this->User->Section->find('list', array('conditions' => array('status' => E_ERROR)));
        $designations = $this->User->Designation->find('list', array('conditions' => array('status' => E_ERROR)));
        $roles = $this->User->Role->find('list', array('conditions' => array('status' => E_ERROR)));
        $assets = $this->User->Asset->find('all', array('conditions' => array('Asset.user_id' => $id)));
        $accessories = $this->User->Accessory->find('all', array('conditions' => array('Accessory.user_id' => $id)));
        $licenses = $this->User->License->find('all', array('conditions' => array('License.user_id' => $id)));
        $consumables = $this->User->Consumable->find('all', array('conditions' => array('Consumable.user_id' => $id)));
        $this->set(compact('companies', 'departments', 'sections', 'designations', 'roles', 'assets','accessories','licenses','consumables'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        $this->request->allowMethod('post', 'delete');
        if ($this->User->delete($id)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

    public function dashboard() {
        if (!$this->Auth->loggedIn()) {
            return $this->redirect(array('action' => 'login'));
        }
        $this->set('companies', $this->User->Company->find('list', array('conditions' => array('status' => E_ERROR, 'id IN(' . $this->Auth->user('companies') . ')'))));

        if (empty($this->request->data['Src']['company_id'])) {
            $this->request->data['Src']['company_id'] = $this->Auth->user('company_id');
        }
        if (empty($this->request->data['Src']['date'])) {
            $this->request->data['Src']['date'] = date('Y-m-d');
        }
        $this->loadModel('Asset');
        $this->loadModel('Accessory');
        $this->loadModel('Consumable');
        $this->loadModel('License');
        $totalassets = $this->Asset->find('count', array('conditions' => array('Asset.company_id' => $this->request->data['Src']['company_id'])));
        $totalaccessories = $this->Accessory->find('count', array('conditions' => array('Accessory.company_id' => $this->request->data['Src']['company_id'])));
        $totalconsumables = $this->Consumable->find('count', array('conditions' => array('Consumable.company_id' => $this->request->data['Src']['company_id'])));
        $totallicenses = $this->License->find('count', array('conditions' => array('License.company_id' => $this->request->data['Src']['company_id'])));
        $totusers = $this->User->find('count', array('conditions' => array('company_id' => $this->request->data['Src']['company_id'], 'status' => E_ERROR), 'recursive' => -1));
        $totuser = $this->User->find('count', array('conditions' => array('company_id' => $this->request->data['Src']['company_id'], 'status' => E_ERROR, 'created <=' => $this->request->data['Src']['date']), 'recursive' => -1));
        $this->set(compact('totusers', 'totuser', 'totalassets', 'totalaccessories', 'totalconsumables', 'totallicenses'));
    }

    public function my_dashboard() {
        $company_id = $this->Auth->user('company_id');

        if (empty($this->request->data['Src']['date'])) {
            $this->request->data['Src']['date'] = date('Y-m');
        }
        $df = $this->request->data['Src']['date'] . '-01';
        $dt = date('Y-m-t', strtotime($this->request->data['Src']['date']));

        $this->set(compact('company', 'df', 'dt'));
    }

    //Lgin
    public function login() {
        $this->layout = 'login';
        if ($this->request->is('post')) {
            if ($this->Auth->login()) {
                // write the cookie
                if (isset($this->request->data['User']['rememberme'])) {
                    $this->Cookie->write('remember_me_cookie', $this->request->data['User'], true, '2 weeks');
                }

                if ($this->Auth->user('status') == E_ERROR) {
                    $this->Flash->success(__('Welcome ' . $this->Auth->user('name')));
                    return $this->redirect(array('controller' => 'users', 'action' => 'dashboard'));
                } else {
                    $this->logout(1);
                }
            } else {
                $this->Flash->error(__('Your username/password combination was incorrect.'));
            }
        }
    }

    public function logout($inact = null) {
        $this->Cookie->delete('remember_me_cookie');

        $this->Session->destroy();

        if ($inact) {
            $this->Flash->error(__('Your account is inactive.'));
        }

        return $this->redirect($this->Auth->logout());
    }

    public function group_access() {
        
    }

    public function cp($id = null) {
        $this->User->id = $this->Auth->user('id');
        if (!$this->User->exists()) {
            throw new NotFoundException('Invalid user');
        }

        if ($this->request->is('post') || $this->request->is('put')) {
            $user = $this->User->find('first', array('conditions' => array("User.id" => $this->Auth->user('id')), 'recursive' => -1));
            if ($user ['User'] ['password'] != $this->request->data ['User'] ['current_password']) {
                $this->Flash->error(__('Current Password is not correct.'));
            } else if ($this->request->data ['User'] ['password'] != $this->request->data ['User'] ['actpass']) {
                $this->Flash->error(__('Password and Confirm Password is not same.'));
            } else {
                $this->request->data['User']['id'] = $this->Auth->user('id');
                if ($this->User->save($this->request->data)) {
                    $this->Flash->success(__('Password has been changed successfully.'));
                    return $this->redirect(array('action' => 'cp'));
                } else {
                    $this->Flash->error(__('Password could not be changed. Please, try again.'));
                }
            }
        } else {
            $this->request->data = $this->User->read();
        }
    }

    public function fp() {
        $this->layout = 'public';
        if ($this->request->is('post')) {
            $data = $this->request->data['User']['username'];

            $user = $this->User->find('first', array('recursive' => - 1, 'conditions' => array("BINARY username='" . $data . "'")));
            if (empty($user['User']['id'])) {
                $this->Flash->error(__('Incorrect Email'));
                return;
            }

            if ($user['User']['id']) {
                if ($this->sendMail($data, 'Password Retrieve', 'fp')) {
                    $this->Flash->success(__('Please check your mail for reset your password'));
                    $this->redirect(array('action' => 'login'));
                } else {
                    $this->Flash->error('Please try again.', 'default');
                }
            }
        }
    }

    /**
     * check username exist by ajax
     *
     * @throws NotFoundException
     * @param string $username
     * @return void
     */
    public function ajax_checkuser() {
        $this->autoRender = FALSE;

        $user = $this->User->find('first', array('conditions' => array("User.username" => $this->request->data('username')), 'fields' => array('id'), 'recursive' => -1));
        if (count($user) > 0) {
            echo 'Please use another username';
        } else {
            echo false;
        }
    }

    /**
     * check username exist by ajax
     *
     * @throws NotFoundException
     * @param string $username
     * @return void
     */
    public function ajax_getuser_by_company() {
        $this->layout = 'ajax';

        $users = $this->User->find('list', array('conditions' => array('company_id' => $this->request->data('company_id'), 'status' => E_ERROR), 'order' => array('name' => 'ASC'), 'recursive' => -1));
        $this->set('users', $users);
        $this->set('model', $this->request->data('model'));
        $this->set('user_id', $this->request->data('user_id'));
        $this->set('required', $this->request->data('required'));
    }

    public function ajax_getview_by_user() {
        $this->layout = 'ajax';

        $users = $this->User->find('first', array('conditions' => array('User.id' => $this->request->data('user_id')), 'recursive' => 0));
        $this->set('user', $users);
    }

    /**
     * check getname exist by ajax
     *
     * @throws NotFoundException
     * @param string $user_id
     * @return void
     */
    public function ajax_getname() {
        $this->autoRender = FALSE;

        $user = $this->User->find('first', array('conditions' => array("User.id" => $this->request->data('user_id')), 'fields' => array('name'), 'recursive' => -1));
        if (count($user) > 0) {
            echo $user['User']['name'];
        } else {
            echo false;
        }
    }

}
