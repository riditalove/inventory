<?php

App::uses('AppController', 'Controller');

/**
 * Designations Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Designation $Designation
 * @property PaginatorComponent $Paginator
 */
class DesignationsController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Designation->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['company_id'])) {
            $conditions[] = array("Department.company_id " => $this->request->data['Src']['company_id']);
        }
        if (!empty($this->request->data['Src']['department_id'])) {
            $conditions[] = array("Designation.department_id " => $this->request->data['Src']['department_id']);
        }
        if (!empty($this->request->data['Src']['name'])) {
            $conditions[] = array("Designation.name LIKE '%" . $this->request->data['Src']['name'] . "%'");
        }
        $this->Paginator->settings = array('conditions' => $conditions, 'order' => array('Designation.id' => 'DESC'));
        $this->set('designations', $this->Paginator->paginate());
        
        $this->loadModel('User');
        $users = $this->User->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set('users', $users);
        
        $companies = $this->Designation->Department->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies'));
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Designation->exists($id)) {
            throw new NotFoundException(__('Invalid designation'));
        }
        $options = array('conditions' => array('Designation.' . $this->Designation->primaryKey => $id));
        $this->set('designation', $this->Designation->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Designation->create();
            $this->request->data['Designation']['entry_by'] = $this->Auth->user('id');
            if ($this->Designation->save($this->request->data)) {
                $this->Flash->success(__('The designation has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The designation could not be saved. Please, try again.'));
            }
        }
        
        $companies = $this->Designation->Department->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Designation->exists($id)) {
            throw new NotFoundException(__('Invalid designation'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['Designation']['edit_by'] = $this->Auth->user('id');
            if ($this->Designation->save($this->request->data)) {
                $this->Flash->success(__('The designation has been updated.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The designation could not be updated. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Designation.' . $this->Designation->primaryKey => $id));
            $this->request->data = $this->Designation->find('first', $options);
        }
        
        $companies = $this->Designation->Department->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Designation->id = $id;
        if (!$this->Designation->exists()) {
            throw new NotFoundException(__('Invalid designation'));
        }
        $this->request->allowMethod('post', 'delete');
        if ($this->Designation->delete()) {
            $this->Flash->success(__('The designation has been deleted.'));
        } else {
            $this->Flash->error(__('The designation could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

    public function ajax_getdesignations() {
        $this->layout = 'ajax';

        $designations = $this->Designation->find('list', array('conditions' => array('department_id' => $this->request->data('department_id'))));
        $this->set('designations', $designations);
        $this->set('model', $this->request->data('model'));
        $this->set('designation_id', $this->request->data('designation_id'));
    }

}
