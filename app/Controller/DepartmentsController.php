<?php

App::uses('AppController', 'Controller');

/**
 * Departments Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Department $Department
 * @property PaginatorComponent $Paginator
 */
class DepartmentsController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Department->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['nm'])) {
            $conditions[] = array("Department.name LIKE '%" . $this->request->data['Src']['nm'] . "%'");
        }
        if (!empty($this->request->data['Src']['company_id'])) {
            $conditions[] = array("Department.company_id" => $this->request->data['Src']['company_id']);
        }
        $this->Paginator->settings = array('conditions' => $conditions, 'order' => array('Department.id' => 'DESC'));
        $this->set('departments', $this->Paginator->paginate());

        $this->loadModel('User');
        $users = $this->User->find('list', array('conditions' => array('status' => E_ERROR)));
        $companies = $this->Department->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('users', 'companies'));
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Department->exists($id)) {
            throw new NotFoundException(__('Invalid department'));
        }
        $options = array('conditions' => array('Department.' . $this->Department->primaryKey => $id));
        $this->set('department', $this->Department->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Department->create();
            //pr($this->request->data,1);
            $this->request->data['Department']['entry_by'] = $this->Auth->user('id');
            if ($this->Department->save($this->request->data)) {
                $this->Flash->success(__('The department has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The department could not be saved. Please, try again.'));
            }
        }
        $companies = $this->Department->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Department->exists($id)) {
            throw new NotFoundException(__('Invalid department'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $this->request->data['Department']['edit_by'] = $this->Auth->user('id');
            if ($this->Department->save($this->request->data)) {
                $this->Flash->success(__('The department has been updated.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The department could not be updated. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Department.' . $this->Department->primaryKey => $id));
            $this->request->data = $this->Department->find('first', $options);
        }
        $companies = $this->Department->Company->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('companies'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Department->id = $id;
        if (!$this->Department->exists()) {
            throw new NotFoundException(__('Invalid department'));
        }
        $this->request->allowMethod('post', 'delete');
        if ($this->Department->delete()) {
            $this->Flash->success(__('The department has been deleted.'));
        } else {
            $this->Flash->error(__('The department could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

    /**
     * check username exist by ajax
     *
     * @throws NotFoundException
     * @param string $username
     * @return void
     */
    public function ajax_getdepartments() {
        $this->layout = 'ajax';

        $departments = $this->Department->find('list', array('conditions' => array('company_id' => $this->request->data('company_id')), 'recursive' => -1));
        $this->set('departments', $departments);
        $this->set('model', $this->request->data('model'));
        $this->set('department_id', $this->request->data('department_id'));
    }

}
